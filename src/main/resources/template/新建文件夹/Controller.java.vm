package ${package}import com.baomidou.mybatisplus.plugins.Page;
import com.cloud.dips.common.core.util.Query;
import com.cloud.dips.common.core.util.R;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

;


/**
 * ${comments}
 *
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${pathName}" )
@Api(tags = "自行填写" )
public class ${className}Controller {
    @Autowired
    private ${className}Service ${classname}Service;


    /**
    * 列表
    *
    * @param params 查询参数
    * @return 列表
    */
    @GetMapping("/page" )
    @ApiOperation(value = "列表" )
    //@PreAuthorize("@pms.hasPermission('模块_控制器_方法')")
    public Page page(@RequestParam Map<String, Object> params) {
        return ${classname}Service.selectPage(new Query<>(params), new EntityWrapper<>());
    }


    /**
     * 根据 ${pk.lowerAttrName}获取信息
     *
     * @param ${pk.lowerAttrName} ${pk.lowerAttrName}
     * @return R
     */
    @GetMapping("/info/{${pk.lowerAttrName}}" )
    @ApiOperation(value = "根据${pk.lowerAttrName}获取信息" )
    //@PreAuthorize("@pms.hasPermission('模块_控制器_方法')")
    public R<${className}> info(@PathVariable("${pk.lowerAttrName}" ) ${pk.attrType} ${pk.lowerAttrName}) {
        return new R<>(${classname}Service.selectById(${pk.lowerAttrName}));
    }

    /**
     * 保存
     *
     * @param ${classname} ${className}
     * @return 保存结果
     */
    @PostMapping("/create" )
    @ApiOperation(value = "保存" )
    //@PreAuthorize("@pms.hasPermission('模块_控制器_方法')")
    public R<Boolean> create(@RequestBody ${className} ${classname}) {
        return new R<>(${classname}Service.insert(${classname}));
    }

    /**
     * 修改
     *
     * @param ${classname} ${classname}
     * @return R
     */
    @PostMapping("/update" )
    @ApiOperation(value = "修改" )
    //@PreAuthorize("@pms.hasPermission('模块_控制器_方法')")
    public R<Boolean> update(@RequestBody ${className} ${classname}) {
        return new R<>(${classname}Service.updateById(${classname}));
    }

    /**
     * 根据id删除
     *
     * @param ${pk.lowerAttrName}  ${pk.lowerAttrName}
     * @return R
     */
    @PostMapping("/delete/{${pk.lowerAttrName}}" )
    @ApiOperation(value = "根据${pk.lowerAttrName}删除" )
    //@PreAuthorize("@pms.hasPermission('模块_控制器_方法')")
    public R<Boolean> delete(@PathVariable ${pk.attrType} ${pk.lowerAttrName}) {
        return new R<>(${classname}Service.deleteById(${pk.lowerAttrName}));
    }
}
